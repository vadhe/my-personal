/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./components/dato-image/index.ts":
/*!****************************************!*\
  !*** ./components/dato-image/index.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_datocms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-datocms */ \"react-datocms\");\n/* harmony import */ var react_datocms__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_datocms__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_chakra_ui_react__WEBPACK_IMPORTED_MODULE_0__.chakra)(react_datocms__WEBPACK_IMPORTED_MODULE_1__.Image));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2RhdG8taW1hZ2UvaW5kZXgudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0EsaUVBQWVBLHdEQUFNLENBQUNDLGdEQUFELENBQXJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdyaWtvbXNuL3Y3Ly4vY29tcG9uZW50cy9kYXRvLWltYWdlL2luZGV4LnRzP2VhMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2hha3JhIH0gZnJvbSBcIkBjaGFrcmEtdWkvcmVhY3RcIjtcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcInJlYWN0LWRhdG9jbXNcIjtcbmV4cG9ydCBkZWZhdWx0IGNoYWtyYShJbWFnZSk7Il0sIm5hbWVzIjpbImNoYWtyYSIsIkltYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/dato-image/index.ts\n");

/***/ }),

/***/ "./generated/graphql.ts":
/*!******************************!*\
  !*** ./generated/graphql.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppearanceModelOrderBy\": () => (/* binding */ AppearanceModelOrderBy),\n/* harmony export */   \"ColorBucketType\": () => (/* binding */ ColorBucketType),\n/* harmony export */   \"FaviconType\": () => (/* binding */ FaviconType),\n/* harmony export */   \"ImgixParamsAuto\": () => (/* binding */ ImgixParamsAuto),\n/* harmony export */   \"ImgixParamsBlendAlign\": () => (/* binding */ ImgixParamsBlendAlign),\n/* harmony export */   \"ImgixParamsBlendCrop\": () => (/* binding */ ImgixParamsBlendCrop),\n/* harmony export */   \"ImgixParamsBlendFit\": () => (/* binding */ ImgixParamsBlendFit),\n/* harmony export */   \"ImgixParamsBlendMode\": () => (/* binding */ ImgixParamsBlendMode),\n/* harmony export */   \"ImgixParamsBlendSize\": () => (/* binding */ ImgixParamsBlendSize),\n/* harmony export */   \"ImgixParamsCh\": () => (/* binding */ ImgixParamsCh),\n/* harmony export */   \"ImgixParamsCrop\": () => (/* binding */ ImgixParamsCrop),\n/* harmony export */   \"ImgixParamsCs\": () => (/* binding */ ImgixParamsCs),\n/* harmony export */   \"ImgixParamsFill\": () => (/* binding */ ImgixParamsFill),\n/* harmony export */   \"ImgixParamsFit\": () => (/* binding */ ImgixParamsFit),\n/* harmony export */   \"ImgixParamsFlip\": () => (/* binding */ ImgixParamsFlip),\n/* harmony export */   \"ImgixParamsFm\": () => (/* binding */ ImgixParamsFm),\n/* harmony export */   \"ImgixParamsMarkAlign\": () => (/* binding */ ImgixParamsMarkAlign),\n/* harmony export */   \"ImgixParamsMarkFit\": () => (/* binding */ ImgixParamsMarkFit),\n/* harmony export */   \"ImgixParamsPalette\": () => (/* binding */ ImgixParamsPalette),\n/* harmony export */   \"ImgixParamsTransparency\": () => (/* binding */ ImgixParamsTransparency),\n/* harmony export */   \"ImgixParamsTrim\": () => (/* binding */ ImgixParamsTrim),\n/* harmony export */   \"ImgixParamsTxtAlign\": () => (/* binding */ ImgixParamsTxtAlign),\n/* harmony export */   \"ImgixParamsTxtClip\": () => (/* binding */ ImgixParamsTxtClip),\n/* harmony export */   \"ImgixParamsTxtFit\": () => (/* binding */ ImgixParamsTxtFit),\n/* harmony export */   \"ItemStatus\": () => (/* binding */ ItemStatus),\n/* harmony export */   \"MuxThumbnailFormatType\": () => (/* binding */ MuxThumbnailFormatType),\n/* harmony export */   \"PageModelOrderBy\": () => (/* binding */ PageModelOrderBy),\n/* harmony export */   \"PostModelOrderBy\": () => (/* binding */ PostModelOrderBy),\n/* harmony export */   \"ResolutionType\": () => (/* binding */ ResolutionType),\n/* harmony export */   \"ShowcaseModelOrderBy\": () => (/* binding */ ShowcaseModelOrderBy),\n/* harmony export */   \"SiteLocale\": () => (/* binding */ SiteLocale),\n/* harmony export */   \"TagModelOrderBy\": () => (/* binding */ TagModelOrderBy),\n/* harmony export */   \"UploadOrderBy\": () => (/* binding */ UploadOrderBy),\n/* harmony export */   \"UploadOrientation\": () => (/* binding */ UploadOrientation),\n/* harmony export */   \"UploadType\": () => (/* binding */ UploadType),\n/* harmony export */   \"VideoMp4Res\": () => (/* binding */ VideoMp4Res),\n/* harmony export */   \"AppearanceFragmentDoc\": () => (/* binding */ AppearanceFragmentDoc),\n/* harmony export */   \"PageFieldsFragmentDoc\": () => (/* binding */ PageFieldsFragmentDoc),\n/* harmony export */   \"ResponsiveImageFieldsFragmentDoc\": () => (/* binding */ ResponsiveImageFieldsFragmentDoc),\n/* harmony export */   \"PostMetaFieldsFragmentDoc\": () => (/* binding */ PostMetaFieldsFragmentDoc),\n/* harmony export */   \"PostFieldsFragmentDoc\": () => (/* binding */ PostFieldsFragmentDoc),\n/* harmony export */   \"ShowcaseFragmentDoc\": () => (/* binding */ ShowcaseFragmentDoc),\n/* harmony export */   \"AboutStaticPropsDocument\": () => (/* binding */ AboutStaticPropsDocument),\n/* harmony export */   \"AppearancesStaticPropsDocument\": () => (/* binding */ AppearancesStaticPropsDocument),\n/* harmony export */   \"HomeStaticPropsDocument\": () => (/* binding */ HomeStaticPropsDocument),\n/* harmony export */   \"GetPageDocument\": () => (/* binding */ GetPageDocument),\n/* harmony export */   \"PageStaticPathsDocument\": () => (/* binding */ PageStaticPathsDocument),\n/* harmony export */   \"GetPostsDocument\": () => (/* binding */ GetPostsDocument),\n/* harmony export */   \"GetPostDocument\": () => (/* binding */ GetPostDocument),\n/* harmony export */   \"PostStaticPathsDocument\": () => (/* binding */ PostStaticPathsDocument),\n/* harmony export */   \"ProjectsStaticPropsDocument\": () => (/* binding */ ProjectsStaticPropsDocument),\n/* harmony export */   \"WebsiteSeoTagsDocument\": () => (/* binding */ WebsiteSeoTagsDocument),\n/* harmony export */   \"TagsStaticPathsDocument\": () => (/* binding */ TagsStaticPathsDocument),\n/* harmony export */   \"TagSlugLookupDocument\": () => (/* binding */ TagSlugLookupDocument),\n/* harmony export */   \"TagRelationsDocument\": () => (/* binding */ TagRelationsDocument),\n/* harmony export */   \"getSdk\": () => (/* binding */ getSdk)\n/* harmony export */ });\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-tag */ \"graphql-tag\");\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_tag__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} //@ts-nocheck\n\n/* eslint-disable */\n\n\n\nlet AppearanceModelOrderBy;\n/** Record of type Appearance (appearance) */\n\n(function (AppearanceModelOrderBy) {\n  AppearanceModelOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  AppearanceModelOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  AppearanceModelOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  AppearanceModelOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  AppearanceModelOrderBy[\"IdAsc\"] = \"id_ASC\";\n  AppearanceModelOrderBy[\"IdDesc\"] = \"id_DESC\";\n  AppearanceModelOrderBy[\"FirstPublishedAtAsc\"] = \"_firstPublishedAt_ASC\";\n  AppearanceModelOrderBy[\"FirstPublishedAtDesc\"] = \"_firstPublishedAt_DESC\";\n  AppearanceModelOrderBy[\"PublicationScheduledAtAsc\"] = \"_publicationScheduledAt_ASC\";\n  AppearanceModelOrderBy[\"PublicationScheduledAtDesc\"] = \"_publicationScheduledAt_DESC\";\n  AppearanceModelOrderBy[\"UnpublishingScheduledAtAsc\"] = \"_unpublishingScheduledAt_ASC\";\n  AppearanceModelOrderBy[\"UnpublishingScheduledAtDesc\"] = \"_unpublishingScheduledAt_DESC\";\n  AppearanceModelOrderBy[\"PublishedAtAsc\"] = \"_publishedAt_ASC\";\n  AppearanceModelOrderBy[\"PublishedAtDesc\"] = \"_publishedAt_DESC\";\n  AppearanceModelOrderBy[\"StatusAsc\"] = \"_status_ASC\";\n  AppearanceModelOrderBy[\"StatusDesc\"] = \"_status_DESC\";\n  AppearanceModelOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  AppearanceModelOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  AppearanceModelOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  AppearanceModelOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  AppearanceModelOrderBy[\"IsValidAsc\"] = \"_isValid_ASC\";\n  AppearanceModelOrderBy[\"IsValidDesc\"] = \"_isValid_DESC\";\n  AppearanceModelOrderBy[\"CategoryAsc\"] = \"category_ASC\";\n  AppearanceModelOrderBy[\"CategoryDesc\"] = \"category_DESC\";\n  AppearanceModelOrderBy[\"UrlAsc\"] = \"url_ASC\";\n  AppearanceModelOrderBy[\"UrlDesc\"] = \"url_DESC\";\n  AppearanceModelOrderBy[\"SubtitleAsc\"] = \"subtitle_ASC\";\n  AppearanceModelOrderBy[\"SubtitleDesc\"] = \"subtitle_DESC\";\n  AppearanceModelOrderBy[\"DateAsc\"] = \"date_ASC\";\n  AppearanceModelOrderBy[\"DateDesc\"] = \"date_DESC\";\n  AppearanceModelOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  AppearanceModelOrderBy[\"TitleDesc\"] = \"title_DESC\";\n})(AppearanceModelOrderBy || (AppearanceModelOrderBy = {}));\n\nlet ColorBucketType;\n\n(function (ColorBucketType) {\n  ColorBucketType[\"Red\"] = \"red\";\n  ColorBucketType[\"Orange\"] = \"orange\";\n  ColorBucketType[\"Pink\"] = \"pink\";\n  ColorBucketType[\"Cyan\"] = \"cyan\";\n  ColorBucketType[\"Purple\"] = \"purple\";\n  ColorBucketType[\"Blue\"] = \"blue\";\n  ColorBucketType[\"Yellow\"] = \"yellow\";\n  ColorBucketType[\"Green\"] = \"green\";\n  ColorBucketType[\"Brown\"] = \"brown\";\n  ColorBucketType[\"Grey\"] = \"grey\";\n  ColorBucketType[\"White\"] = \"white\";\n  ColorBucketType[\"Black\"] = \"black\";\n})(ColorBucketType || (ColorBucketType = {}));\n\nlet FaviconType;\n\n(function (FaviconType) {\n  FaviconType[\"Icon\"] = \"icon\";\n  FaviconType[\"AppleTouchIcon\"] = \"appleTouchIcon\";\n  FaviconType[\"MsApplication\"] = \"msApplication\";\n})(FaviconType || (FaviconType = {}));\n\nlet ImgixParamsAuto;\n\n(function (ImgixParamsAuto) {\n  ImgixParamsAuto[\"Enhance\"] = \"enhance\";\n  ImgixParamsAuto[\"Format\"] = \"format\";\n  ImgixParamsAuto[\"Redeye\"] = \"redeye\";\n  ImgixParamsAuto[\"Compress\"] = \"compress\";\n})(ImgixParamsAuto || (ImgixParamsAuto = {}));\n\nlet ImgixParamsBlendAlign;\n\n(function (ImgixParamsBlendAlign) {\n  ImgixParamsBlendAlign[\"Top\"] = \"top\";\n  ImgixParamsBlendAlign[\"Bottom\"] = \"bottom\";\n  ImgixParamsBlendAlign[\"Middle\"] = \"middle\";\n  ImgixParamsBlendAlign[\"Left\"] = \"left\";\n  ImgixParamsBlendAlign[\"Right\"] = \"right\";\n  ImgixParamsBlendAlign[\"Center\"] = \"center\";\n})(ImgixParamsBlendAlign || (ImgixParamsBlendAlign = {}));\n\nlet ImgixParamsBlendCrop;\n\n(function (ImgixParamsBlendCrop) {\n  ImgixParamsBlendCrop[\"Top\"] = \"top\";\n  ImgixParamsBlendCrop[\"Bottom\"] = \"bottom\";\n  ImgixParamsBlendCrop[\"Left\"] = \"left\";\n  ImgixParamsBlendCrop[\"Right\"] = \"right\";\n  ImgixParamsBlendCrop[\"Faces\"] = \"faces\";\n})(ImgixParamsBlendCrop || (ImgixParamsBlendCrop = {}));\n\nlet ImgixParamsBlendFit;\n\n(function (ImgixParamsBlendFit) {\n  ImgixParamsBlendFit[\"Clamp\"] = \"clamp\";\n  ImgixParamsBlendFit[\"Clip\"] = \"clip\";\n  ImgixParamsBlendFit[\"Crop\"] = \"crop\";\n  ImgixParamsBlendFit[\"Scale\"] = \"scale\";\n  ImgixParamsBlendFit[\"Max\"] = \"max\";\n})(ImgixParamsBlendFit || (ImgixParamsBlendFit = {}));\n\nlet ImgixParamsBlendMode;\n\n(function (ImgixParamsBlendMode) {\n  ImgixParamsBlendMode[\"Color\"] = \"color\";\n  ImgixParamsBlendMode[\"Burn\"] = \"burn\";\n  ImgixParamsBlendMode[\"Dodge\"] = \"dodge\";\n  ImgixParamsBlendMode[\"Darken\"] = \"darken\";\n  ImgixParamsBlendMode[\"Difference\"] = \"difference\";\n  ImgixParamsBlendMode[\"Exclusion\"] = \"exclusion\";\n  ImgixParamsBlendMode[\"Hardlight\"] = \"hardlight\";\n  ImgixParamsBlendMode[\"Hue\"] = \"hue\";\n  ImgixParamsBlendMode[\"Lighten\"] = \"lighten\";\n  ImgixParamsBlendMode[\"Luminosity\"] = \"luminosity\";\n  ImgixParamsBlendMode[\"Multiply\"] = \"multiply\";\n  ImgixParamsBlendMode[\"Overlay\"] = \"overlay\";\n  ImgixParamsBlendMode[\"Saturation\"] = \"saturation\";\n  ImgixParamsBlendMode[\"Screen\"] = \"screen\";\n  ImgixParamsBlendMode[\"Softlight\"] = \"softlight\";\n  ImgixParamsBlendMode[\"Normal\"] = \"normal\";\n})(ImgixParamsBlendMode || (ImgixParamsBlendMode = {}));\n\nlet ImgixParamsBlendSize;\n\n(function (ImgixParamsBlendSize) {\n  ImgixParamsBlendSize[\"Inherit\"] = \"inherit\";\n})(ImgixParamsBlendSize || (ImgixParamsBlendSize = {}));\n\nlet ImgixParamsCh;\n\n(function (ImgixParamsCh) {\n  ImgixParamsCh[\"Width\"] = \"width\";\n  ImgixParamsCh[\"Dpr\"] = \"dpr\";\n  ImgixParamsCh[\"SaveData\"] = \"saveData\";\n})(ImgixParamsCh || (ImgixParamsCh = {}));\n\nlet ImgixParamsCrop;\n\n(function (ImgixParamsCrop) {\n  ImgixParamsCrop[\"Top\"] = \"top\";\n  ImgixParamsCrop[\"Bottom\"] = \"bottom\";\n  ImgixParamsCrop[\"Left\"] = \"left\";\n  ImgixParamsCrop[\"Right\"] = \"right\";\n  ImgixParamsCrop[\"Faces\"] = \"faces\";\n  ImgixParamsCrop[\"Entropy\"] = \"entropy\";\n  ImgixParamsCrop[\"Edges\"] = \"edges\";\n  ImgixParamsCrop[\"Focalpoint\"] = \"focalpoint\";\n})(ImgixParamsCrop || (ImgixParamsCrop = {}));\n\nlet ImgixParamsCs;\n\n(function (ImgixParamsCs) {\n  ImgixParamsCs[\"Srgb\"] = \"srgb\";\n  ImgixParamsCs[\"Adobergb1998\"] = \"adobergb1998\";\n  ImgixParamsCs[\"Tinysrgb\"] = \"tinysrgb\";\n  ImgixParamsCs[\"Strip\"] = \"strip\";\n})(ImgixParamsCs || (ImgixParamsCs = {}));\n\nlet ImgixParamsFill;\n\n(function (ImgixParamsFill) {\n  ImgixParamsFill[\"Solid\"] = \"solid\";\n  ImgixParamsFill[\"Blur\"] = \"blur\";\n})(ImgixParamsFill || (ImgixParamsFill = {}));\n\nlet ImgixParamsFit;\n\n(function (ImgixParamsFit) {\n  ImgixParamsFit[\"Clamp\"] = \"clamp\";\n  ImgixParamsFit[\"Clip\"] = \"clip\";\n  ImgixParamsFit[\"Crop\"] = \"crop\";\n  ImgixParamsFit[\"Facearea\"] = \"facearea\";\n  ImgixParamsFit[\"Fill\"] = \"fill\";\n  ImgixParamsFit[\"Fillmax\"] = \"fillmax\";\n  ImgixParamsFit[\"Max\"] = \"max\";\n  ImgixParamsFit[\"Min\"] = \"min\";\n  ImgixParamsFit[\"Scale\"] = \"scale\";\n})(ImgixParamsFit || (ImgixParamsFit = {}));\n\nlet ImgixParamsFlip;\n\n(function (ImgixParamsFlip) {\n  ImgixParamsFlip[\"H\"] = \"h\";\n  ImgixParamsFlip[\"V\"] = \"v\";\n  ImgixParamsFlip[\"Hv\"] = \"hv\";\n})(ImgixParamsFlip || (ImgixParamsFlip = {}));\n\nlet ImgixParamsFm;\n\n(function (ImgixParamsFm) {\n  ImgixParamsFm[\"Gif\"] = \"gif\";\n  ImgixParamsFm[\"Jpg\"] = \"jpg\";\n  ImgixParamsFm[\"Jp2\"] = \"jp2\";\n  ImgixParamsFm[\"Json\"] = \"json\";\n  ImgixParamsFm[\"Jxr\"] = \"jxr\";\n  ImgixParamsFm[\"Pjpg\"] = \"pjpg\";\n  ImgixParamsFm[\"Mp4\"] = \"mp4\";\n  ImgixParamsFm[\"Png\"] = \"png\";\n  ImgixParamsFm[\"Png8\"] = \"png8\";\n  ImgixParamsFm[\"Png32\"] = \"png32\";\n  ImgixParamsFm[\"Webp\"] = \"webp\";\n  ImgixParamsFm[\"Webm\"] = \"webm\";\n})(ImgixParamsFm || (ImgixParamsFm = {}));\n\nlet ImgixParamsMarkAlign;\n\n(function (ImgixParamsMarkAlign) {\n  ImgixParamsMarkAlign[\"Top\"] = \"top\";\n  ImgixParamsMarkAlign[\"Middle\"] = \"middle\";\n  ImgixParamsMarkAlign[\"Bottom\"] = \"bottom\";\n  ImgixParamsMarkAlign[\"Left\"] = \"left\";\n  ImgixParamsMarkAlign[\"Center\"] = \"center\";\n  ImgixParamsMarkAlign[\"Right\"] = \"right\";\n})(ImgixParamsMarkAlign || (ImgixParamsMarkAlign = {}));\n\nlet ImgixParamsMarkFit;\n\n(function (ImgixParamsMarkFit) {\n  ImgixParamsMarkFit[\"Clip\"] = \"clip\";\n  ImgixParamsMarkFit[\"Crop\"] = \"crop\";\n  ImgixParamsMarkFit[\"Fill\"] = \"fill\";\n  ImgixParamsMarkFit[\"Max\"] = \"max\";\n  ImgixParamsMarkFit[\"Scale\"] = \"scale\";\n})(ImgixParamsMarkFit || (ImgixParamsMarkFit = {}));\n\nlet ImgixParamsPalette;\n\n(function (ImgixParamsPalette) {\n  ImgixParamsPalette[\"Css\"] = \"css\";\n  ImgixParamsPalette[\"Json\"] = \"json\";\n})(ImgixParamsPalette || (ImgixParamsPalette = {}));\n\nlet ImgixParamsTransparency;\n\n(function (ImgixParamsTransparency) {\n  ImgixParamsTransparency[\"Grid\"] = \"grid\";\n})(ImgixParamsTransparency || (ImgixParamsTransparency = {}));\n\nlet ImgixParamsTrim;\n\n(function (ImgixParamsTrim) {\n  ImgixParamsTrim[\"Auto\"] = \"auto\";\n  ImgixParamsTrim[\"Color\"] = \"color\";\n})(ImgixParamsTrim || (ImgixParamsTrim = {}));\n\nlet ImgixParamsTxtAlign;\n\n(function (ImgixParamsTxtAlign) {\n  ImgixParamsTxtAlign[\"Top\"] = \"top\";\n  ImgixParamsTxtAlign[\"Middle\"] = \"middle\";\n  ImgixParamsTxtAlign[\"Bottom\"] = \"bottom\";\n  ImgixParamsTxtAlign[\"Left\"] = \"left\";\n  ImgixParamsTxtAlign[\"Center\"] = \"center\";\n  ImgixParamsTxtAlign[\"Right\"] = \"right\";\n})(ImgixParamsTxtAlign || (ImgixParamsTxtAlign = {}));\n\nlet ImgixParamsTxtClip;\n\n(function (ImgixParamsTxtClip) {\n  ImgixParamsTxtClip[\"Start\"] = \"start\";\n  ImgixParamsTxtClip[\"Middle\"] = \"middle\";\n  ImgixParamsTxtClip[\"End\"] = \"end\";\n  ImgixParamsTxtClip[\"Ellipsis\"] = \"ellipsis\";\n})(ImgixParamsTxtClip || (ImgixParamsTxtClip = {}));\n\nlet ImgixParamsTxtFit;\n/** Specifies how to filter by usage */\n\n(function (ImgixParamsTxtFit) {\n  ImgixParamsTxtFit[\"Max\"] = \"max\";\n})(ImgixParamsTxtFit || (ImgixParamsTxtFit = {}));\n\nlet ItemStatus;\n/** Specifies how to filter Multiple-links fields */\n\n(function (ItemStatus) {\n  ItemStatus[\"Draft\"] = \"draft\";\n  ItemStatus[\"Updated\"] = \"updated\";\n  ItemStatus[\"Published\"] = \"published\";\n})(ItemStatus || (ItemStatus = {}));\n\nlet MuxThumbnailFormatType;\n/** Specifies how to filter by image orientation */\n\n(function (MuxThumbnailFormatType) {\n  MuxThumbnailFormatType[\"Jpg\"] = \"jpg\";\n  MuxThumbnailFormatType[\"Png\"] = \"png\";\n  MuxThumbnailFormatType[\"Gif\"] = \"gif\";\n})(MuxThumbnailFormatType || (MuxThumbnailFormatType = {}));\n\nlet PageModelOrderBy;\n/** Record of type Page (page) */\n\n(function (PageModelOrderBy) {\n  PageModelOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  PageModelOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  PageModelOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  PageModelOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  PageModelOrderBy[\"IdAsc\"] = \"id_ASC\";\n  PageModelOrderBy[\"IdDesc\"] = \"id_DESC\";\n  PageModelOrderBy[\"FirstPublishedAtAsc\"] = \"_firstPublishedAt_ASC\";\n  PageModelOrderBy[\"FirstPublishedAtDesc\"] = \"_firstPublishedAt_DESC\";\n  PageModelOrderBy[\"PublicationScheduledAtAsc\"] = \"_publicationScheduledAt_ASC\";\n  PageModelOrderBy[\"PublicationScheduledAtDesc\"] = \"_publicationScheduledAt_DESC\";\n  PageModelOrderBy[\"UnpublishingScheduledAtAsc\"] = \"_unpublishingScheduledAt_ASC\";\n  PageModelOrderBy[\"UnpublishingScheduledAtDesc\"] = \"_unpublishingScheduledAt_DESC\";\n  PageModelOrderBy[\"PublishedAtAsc\"] = \"_publishedAt_ASC\";\n  PageModelOrderBy[\"PublishedAtDesc\"] = \"_publishedAt_DESC\";\n  PageModelOrderBy[\"StatusAsc\"] = \"_status_ASC\";\n  PageModelOrderBy[\"StatusDesc\"] = \"_status_DESC\";\n  PageModelOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  PageModelOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  PageModelOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  PageModelOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  PageModelOrderBy[\"IsValidAsc\"] = \"_isValid_ASC\";\n  PageModelOrderBy[\"IsValidDesc\"] = \"_isValid_DESC\";\n  PageModelOrderBy[\"SubtitleAsc\"] = \"subtitle_ASC\";\n  PageModelOrderBy[\"SubtitleDesc\"] = \"subtitle_DESC\";\n  PageModelOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  PageModelOrderBy[\"TitleDesc\"] = \"title_DESC\";\n})(PageModelOrderBy || (PageModelOrderBy = {}));\n\nlet PostModelOrderBy;\n/** Record of type Post (post) */\n\n(function (PostModelOrderBy) {\n  PostModelOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  PostModelOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  PostModelOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  PostModelOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  PostModelOrderBy[\"IdAsc\"] = \"id_ASC\";\n  PostModelOrderBy[\"IdDesc\"] = \"id_DESC\";\n  PostModelOrderBy[\"FirstPublishedAtAsc\"] = \"_firstPublishedAt_ASC\";\n  PostModelOrderBy[\"FirstPublishedAtDesc\"] = \"_firstPublishedAt_DESC\";\n  PostModelOrderBy[\"PublicationScheduledAtAsc\"] = \"_publicationScheduledAt_ASC\";\n  PostModelOrderBy[\"PublicationScheduledAtDesc\"] = \"_publicationScheduledAt_DESC\";\n  PostModelOrderBy[\"UnpublishingScheduledAtAsc\"] = \"_unpublishingScheduledAt_ASC\";\n  PostModelOrderBy[\"UnpublishingScheduledAtDesc\"] = \"_unpublishingScheduledAt_DESC\";\n  PostModelOrderBy[\"PublishedAtAsc\"] = \"_publishedAt_ASC\";\n  PostModelOrderBy[\"PublishedAtDesc\"] = \"_publishedAt_DESC\";\n  PostModelOrderBy[\"StatusAsc\"] = \"_status_ASC\";\n  PostModelOrderBy[\"StatusDesc\"] = \"_status_DESC\";\n  PostModelOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  PostModelOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  PostModelOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  PostModelOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  PostModelOrderBy[\"IsValidAsc\"] = \"_isValid_ASC\";\n  PostModelOrderBy[\"IsValidDesc\"] = \"_isValid_DESC\";\n  PostModelOrderBy[\"SubtitleAsc\"] = \"subtitle_ASC\";\n  PostModelOrderBy[\"SubtitleDesc\"] = \"subtitle_DESC\";\n  PostModelOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  PostModelOrderBy[\"TitleDesc\"] = \"title_DESC\";\n})(PostModelOrderBy || (PostModelOrderBy = {}));\n\nlet ResolutionType;\n\n(function (ResolutionType) {\n  ResolutionType[\"Icon\"] = \"icon\";\n  ResolutionType[\"Small\"] = \"small\";\n  ResolutionType[\"Medium\"] = \"medium\";\n  ResolutionType[\"Large\"] = \"large\";\n})(ResolutionType || (ResolutionType = {}));\n\nlet ShowcaseModelOrderBy;\n/** Record of type Showcase (showcase) */\n\n(function (ShowcaseModelOrderBy) {\n  ShowcaseModelOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  ShowcaseModelOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  ShowcaseModelOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  ShowcaseModelOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  ShowcaseModelOrderBy[\"IdAsc\"] = \"id_ASC\";\n  ShowcaseModelOrderBy[\"IdDesc\"] = \"id_DESC\";\n  ShowcaseModelOrderBy[\"FirstPublishedAtAsc\"] = \"_firstPublishedAt_ASC\";\n  ShowcaseModelOrderBy[\"FirstPublishedAtDesc\"] = \"_firstPublishedAt_DESC\";\n  ShowcaseModelOrderBy[\"PositionAsc\"] = \"position_ASC\";\n  ShowcaseModelOrderBy[\"PositionDesc\"] = \"position_DESC\";\n  ShowcaseModelOrderBy[\"PublicationScheduledAtAsc\"] = \"_publicationScheduledAt_ASC\";\n  ShowcaseModelOrderBy[\"PublicationScheduledAtDesc\"] = \"_publicationScheduledAt_DESC\";\n  ShowcaseModelOrderBy[\"UnpublishingScheduledAtAsc\"] = \"_unpublishingScheduledAt_ASC\";\n  ShowcaseModelOrderBy[\"UnpublishingScheduledAtDesc\"] = \"_unpublishingScheduledAt_DESC\";\n  ShowcaseModelOrderBy[\"PublishedAtAsc\"] = \"_publishedAt_ASC\";\n  ShowcaseModelOrderBy[\"PublishedAtDesc\"] = \"_publishedAt_DESC\";\n  ShowcaseModelOrderBy[\"StatusAsc\"] = \"_status_ASC\";\n  ShowcaseModelOrderBy[\"StatusDesc\"] = \"_status_DESC\";\n  ShowcaseModelOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  ShowcaseModelOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  ShowcaseModelOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  ShowcaseModelOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  ShowcaseModelOrderBy[\"IsValidAsc\"] = \"_isValid_ASC\";\n  ShowcaseModelOrderBy[\"IsValidDesc\"] = \"_isValid_DESC\";\n  ShowcaseModelOrderBy[\"SubtitleAsc\"] = \"subtitle_ASC\";\n  ShowcaseModelOrderBy[\"SubtitleDesc\"] = \"subtitle_DESC\";\n  ShowcaseModelOrderBy[\"UrlAsc\"] = \"url_ASC\";\n  ShowcaseModelOrderBy[\"UrlDesc\"] = \"url_DESC\";\n  ShowcaseModelOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  ShowcaseModelOrderBy[\"TitleDesc\"] = \"title_DESC\";\n})(ShowcaseModelOrderBy || (ShowcaseModelOrderBy = {}));\n\nlet SiteLocale;\n/** Specifies how to filter Slug fields */\n\n(function (SiteLocale) {\n  SiteLocale[\"En\"] = \"en\";\n})(SiteLocale || (SiteLocale = {}));\n\nlet TagModelOrderBy;\n/** Record of type Tag (tag) */\n\n(function (TagModelOrderBy) {\n  TagModelOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  TagModelOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  TagModelOrderBy[\"CreatedAtAsc\"] = \"createdAt_ASC\";\n  TagModelOrderBy[\"CreatedAtDesc\"] = \"createdAt_DESC\";\n  TagModelOrderBy[\"IdAsc\"] = \"id_ASC\";\n  TagModelOrderBy[\"IdDesc\"] = \"id_DESC\";\n  TagModelOrderBy[\"FirstPublishedAtAsc\"] = \"_firstPublishedAt_ASC\";\n  TagModelOrderBy[\"FirstPublishedAtDesc\"] = \"_firstPublishedAt_DESC\";\n  TagModelOrderBy[\"PublicationScheduledAtAsc\"] = \"_publicationScheduledAt_ASC\";\n  TagModelOrderBy[\"PublicationScheduledAtDesc\"] = \"_publicationScheduledAt_DESC\";\n  TagModelOrderBy[\"UnpublishingScheduledAtAsc\"] = \"_unpublishingScheduledAt_ASC\";\n  TagModelOrderBy[\"UnpublishingScheduledAtDesc\"] = \"_unpublishingScheduledAt_DESC\";\n  TagModelOrderBy[\"PublishedAtAsc\"] = \"_publishedAt_ASC\";\n  TagModelOrderBy[\"PublishedAtDesc\"] = \"_publishedAt_DESC\";\n  TagModelOrderBy[\"StatusAsc\"] = \"_status_ASC\";\n  TagModelOrderBy[\"StatusDesc\"] = \"_status_DESC\";\n  TagModelOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  TagModelOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  TagModelOrderBy[\"UpdatedAtAsc\"] = \"updatedAt_ASC\";\n  TagModelOrderBy[\"UpdatedAtDesc\"] = \"updatedAt_DESC\";\n  TagModelOrderBy[\"IsValidAsc\"] = \"_isValid_ASC\";\n  TagModelOrderBy[\"IsValidDesc\"] = \"_isValid_DESC\";\n  TagModelOrderBy[\"TitleAsc\"] = \"title_ASC\";\n  TagModelOrderBy[\"TitleDesc\"] = \"title_DESC\";\n})(TagModelOrderBy || (TagModelOrderBy = {}));\n\nlet UploadOrderBy;\n\n(function (UploadOrderBy) {\n  UploadOrderBy[\"CreatedAtAsc\"] = \"_createdAt_ASC\";\n  UploadOrderBy[\"CreatedAtDesc\"] = \"_createdAt_DESC\";\n  UploadOrderBy[\"SizeAsc\"] = \"size_ASC\";\n  UploadOrderBy[\"SizeDesc\"] = \"size_DESC\";\n  UploadOrderBy[\"ResolutionAsc\"] = \"resolution_ASC\";\n  UploadOrderBy[\"ResolutionDesc\"] = \"resolution_DESC\";\n  UploadOrderBy[\"FilenameAsc\"] = \"filename_ASC\";\n  UploadOrderBy[\"FilenameDesc\"] = \"filename_DESC\";\n  UploadOrderBy[\"BasenameAsc\"] = \"basename_ASC\";\n  UploadOrderBy[\"BasenameDesc\"] = \"basename_DESC\";\n  UploadOrderBy[\"MimeTypeAsc\"] = \"mimeType_ASC\";\n  UploadOrderBy[\"MimeTypeDesc\"] = \"mimeType_DESC\";\n  UploadOrderBy[\"FormatAsc\"] = \"format_ASC\";\n  UploadOrderBy[\"FormatDesc\"] = \"format_DESC\";\n  UploadOrderBy[\"UpdatedAtAsc\"] = \"_updatedAt_ASC\";\n  UploadOrderBy[\"UpdatedAtDesc\"] = \"_updatedAt_DESC\";\n  UploadOrderBy[\"IdAsc\"] = \"id_ASC\";\n  UploadOrderBy[\"IdDesc\"] = \"id_DESC\";\n})(UploadOrderBy || (UploadOrderBy = {}));\n\nlet UploadOrientation;\n/** Specifies how to filter by size */\n\n(function (UploadOrientation) {\n  UploadOrientation[\"Landscape\"] = \"landscape\";\n  UploadOrientation[\"Portrait\"] = \"portrait\";\n  UploadOrientation[\"Square\"] = \"square\";\n})(UploadOrientation || (UploadOrientation = {}));\n\nlet UploadType;\n/** Specifies how to filter by update datetime */\n\n(function (UploadType) {\n  UploadType[\"Image\"] = \"image\";\n  UploadType[\"Audio\"] = \"audio\";\n  UploadType[\"Video\"] = \"video\";\n  UploadType[\"Richtext\"] = \"richtext\";\n  UploadType[\"Presentation\"] = \"presentation\";\n  UploadType[\"Spreadsheet\"] = \"spreadsheet\";\n  UploadType[\"Pdfdocument\"] = \"pdfdocument\";\n  UploadType[\"Archive\"] = \"archive\";\n})(UploadType || (UploadType = {}));\n\nlet VideoMp4Res;\n\n(function (VideoMp4Res) {\n  VideoMp4Res[\"Low\"] = \"low\";\n  VideoMp4Res[\"Medium\"] = \"medium\";\n  VideoMp4Res[\"High\"] = \"high\";\n})(VideoMp4Res || (VideoMp4Res = {}));\n\nconst AppearanceFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment AppearanceFragment on AppearanceRecord {\n  id\n  title\n  subtitle\n  date\n  tags {\n    title\n    slug\n  }\n  url\n  category\n}\n    `;\nconst PageFieldsFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment PageFields on PageRecord {\n  _seoMetaTags {\n    attributes\n    content\n    tag\n  }\n  _updatedAt\n  title\n  subtitle\n  slug\n  content\n}\n    `;\nconst ResponsiveImageFieldsFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment ResponsiveImageFields on ResponsiveImage {\n  alt\n  aspectRatio\n  base64\n  height\n  sizes\n  src\n  srcSet\n  title\n  webpSrcSet\n  width\n}\n    `;\nconst PostMetaFieldsFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment PostMetaFields on PostRecord {\n  _publishedAt\n  _updatedAt\n  cover {\n    responsiveImage {\n      ...ResponsiveImageFields\n    }\n  }\n  title\n  slug\n  subtitle\n  tags {\n    slug\n    title\n  }\n}\n    ${ResponsiveImageFieldsFragmentDoc}`;\nconst PostFieldsFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment PostFields on PostRecord {\n  _seoMetaTags {\n    attributes\n    content\n    tag\n  }\n  ...PostMetaFields\n  content\n}\n    ${PostMetaFieldsFragmentDoc}`;\nconst ShowcaseFragmentDoc = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    fragment ShowcaseFragment on ShowcaseRecord {\n  id\n  image {\n    responsiveImage(imgixParams: {ar: \"16:9\", fit: crop}) {\n      ...ResponsiveImageFields\n    }\n  }\n  title\n  subtitle\n  tags {\n    title\n    slug\n  }\n  url\n}\n    ${ResponsiveImageFieldsFragmentDoc}`;\nconst AboutStaticPropsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query aboutStaticProps {\n  about {\n    coverImage {\n      responsiveImage {\n        ...ResponsiveImageFields\n      }\n    }\n    knowledgeBases {\n      title\n      entries\n    }\n    preface\n    updatedAt\n  }\n}\n    ${ResponsiveImageFieldsFragmentDoc}`;\nconst AppearancesStaticPropsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query appearancesStaticProps {\n  allAppearances(orderBy: date_DESC) {\n    ...AppearanceFragment\n  }\n}\n    ${AppearanceFragmentDoc}`;\nconst HomeStaticPropsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query homeStaticProps {\n  site: _site {\n    favicon {\n      responsiveImage(imgixParams: {bg: \"00000000\", fm: png}) {\n        ...ResponsiveImageFields\n      }\n    }\n  }\n}\n    ${ResponsiveImageFieldsFragmentDoc}`;\nconst GetPageDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query getPage($slug: String!) {\n  page(filter: {slug: {eq: $slug}}) {\n    ...PageFields\n  }\n}\n    ${PageFieldsFragmentDoc}`;\nconst PageStaticPathsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query pageStaticPaths($skip: IntType) {\n  allPages(first: 100, orderBy: title_ASC, skip: $skip) {\n    slug\n  }\n}\n    `;\nconst GetPostsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query getPosts($skip: IntType) {\n  allPosts(orderBy: _publishedAt_DESC, skip: $skip) {\n    ...PostMetaFields\n  }\n}\n    ${PostMetaFieldsFragmentDoc}\n${ResponsiveImageFieldsFragmentDoc}`;\nconst GetPostDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query getPost($slug: String!) {\n  post(filter: {slug: {eq: $slug}}) {\n    ...PostFields\n  }\n}\n    ${PostFieldsFragmentDoc}\n${PostMetaFieldsFragmentDoc}\n${ResponsiveImageFieldsFragmentDoc}`;\nconst PostStaticPathsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query postStaticPaths($skip: IntType) {\n  allPosts(first: 100, orderBy: title_DESC, skip: $skip) {\n    slug\n  }\n}\n    `;\nconst ProjectsStaticPropsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query projectsStaticProps {\n  allShowcases(orderBy: position_ASC) {\n    ...ShowcaseFragment\n  }\n}\n    ${ShowcaseFragmentDoc}\n${ResponsiveImageFieldsFragmentDoc}`;\nconst WebsiteSeoTagsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query websiteSeoTags {\n  about {\n    email\n    socialsJson\n  }\n  site: _site {\n    favicon: faviconMetaTags(variants: [appleTouchIcon, icon, msApplication]) {\n      attributes\n      content\n      tag\n    }\n    seo: globalSeo {\n      fallback: fallbackSeo {\n        description\n        image {\n          url\n          width\n          height\n        }\n        title\n        twitterCard\n      }\n      siteName\n      titleSuffix\n      twitterAccount\n    }\n  }\n}\n    `;\nconst TagsStaticPathsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query tagsStaticPaths($skip: IntType) {\n  allTags(first: 100, orderBy: title_ASC, skip: $skip) {\n    slug\n  }\n}\n    `;\nconst TagSlugLookupDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query tagSlugLookup($slug: String!) {\n  tag(filter: {slug: {eq: $slug}}) {\n    id\n    title\n    slug\n  }\n}\n    `;\nconst TagRelationsDocument = /*#__PURE__*/(graphql_tag__WEBPACK_IMPORTED_MODULE_0___default())`\n    query tagRelations($id: ItemId!) {\n  allAppearances(filter: {tags: {anyIn: [$id]}}) {\n    ...AppearanceFragment\n  }\n  allPosts(filter: {tags: {anyIn: [$id]}}) {\n    ...PostMetaFields\n  }\n  allShowcases(filter: {tags: {anyIn: [$id]}}) {\n    ...ShowcaseFragment\n  }\n}\n    ${AppearanceFragmentDoc}\n${PostMetaFieldsFragmentDoc}\n${ResponsiveImageFieldsFragmentDoc}\n${ShowcaseFragmentDoc}`;\n\nconst defaultWrapper = (action, _operationName) => action();\n\nfunction getSdk(client, withWrapper = defaultWrapper) {\n  return {\n    aboutStaticProps(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(AboutStaticPropsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'aboutStaticProps');\n    },\n\n    appearancesStaticProps(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(AppearancesStaticPropsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'appearancesStaticProps');\n    },\n\n    homeStaticProps(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(HomeStaticPropsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'homeStaticProps');\n    },\n\n    getPage(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(GetPageDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'getPage');\n    },\n\n    pageStaticPaths(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(PageStaticPathsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'pageStaticPaths');\n    },\n\n    getPosts(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(GetPostsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'getPosts');\n    },\n\n    getPost(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(GetPostDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'getPost');\n    },\n\n    postStaticPaths(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(PostStaticPathsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'postStaticPaths');\n    },\n\n    projectsStaticProps(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(ProjectsStaticPropsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'projectsStaticProps');\n    },\n\n    websiteSeoTags(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(WebsiteSeoTagsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'websiteSeoTags');\n    },\n\n    tagsStaticPaths(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(TagsStaticPathsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'tagsStaticPaths');\n    },\n\n    tagSlugLookup(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(TagSlugLookupDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'tagSlugLookup');\n    },\n\n    tagRelations(variables, requestHeaders) {\n      return withWrapper(wrappedRequestHeaders => client.request(TagRelationsDocument, variables, _objectSpread(_objectSpread({}, requestHeaders), wrappedRequestHeaders)), 'tagRelations');\n    }\n\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./generated/graphql.ts\n");

/***/ }),

/***/ "./lib/cms.ts":
/*!********************!*\
  !*** ./lib/cms.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ cms)\n/* harmony export */ });\n/* harmony import */ var _generated_graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~generated/graphql */ \"./generated/graphql.ts\");\n/* harmony import */ var _grikomsn_shared_lib_datocms_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grikomsn/shared/lib/datocms-client */ \"../shared/lib/datocms-client.js\");\n/* harmony import */ var _grikomsn_shared_lib_datocms_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grikomsn_shared_lib_datocms_client__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction cms() {\n  return (0,_generated_graphql__WEBPACK_IMPORTED_MODULE_0__.getSdk)((_grikomsn_shared_lib_datocms_client__WEBPACK_IMPORTED_MODULE_1___default()));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvY21zLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2UsU0FBU0UsR0FBVCxHQUFlO0FBQzVCLFNBQU9GLDBEQUFNLENBQUNDLDRFQUFELENBQWI7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bncmlrb21zbi92Ny8uL2xpYi9jbXMudHM/M2M2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTZGsgfSBmcm9tIFwifmdlbmVyYXRlZC9ncmFwaHFsXCI7XG5pbXBvcnQgY2xpZW50IGZyb20gXCJAZ3Jpa29tc24vc2hhcmVkL2xpYi9kYXRvY21zLWNsaWVudFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY21zKCkge1xuICByZXR1cm4gZ2V0U2RrKGNsaWVudCk7XG59Il0sIm5hbWVzIjpbImdldFNkayIsImNsaWVudCIsImNtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/cms.ts\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getStaticProps\": () => (/* binding */ getStaticProps),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_dato_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~components/dato-image */ \"./components/dato-image/index.ts\");\n/* harmony import */ var _generated_meta_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~generated/meta.json */ \"./generated/meta.json\");\n/* harmony import */ var _lib_cms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~lib/cms */ \"./lib/cms.ts\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"@chakra-ui/react\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/link */ \"../../node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_seo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next-seo */ \"next-seo\");\n/* harmony import */ var next_seo__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_seo__WEBPACK_IMPORTED_MODULE_6__);\n\n\nvar _jsxFileName = \"/home/vadhe/Desktop/side-project/griko.id/packages/v7/pages/index.tsx\";\n\n\n\n\n\n\nconst getStaticProps = async () => {\n  const data = await (0,_lib_cms__WEBPACK_IMPORTED_MODULE_3__.default)().homeStaticProps();\n  return {\n    props: {\n      data\n    }\n  };\n};\n\nconst HomePage = props => {\n  var _data$site$favicon;\n\n  const {\n    data\n  } = props;\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_seo__WEBPACK_IMPORTED_MODULE_6__.NextSeo, {\n      title: _generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.site.seo.siteName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Container, {\n      maxW: \"4xl\",\n      p: [4, 8],\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Stack, {\n        align: \"center\",\n        spacing: 4,\n        textAlign: \"center\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_5___default()), {\n          href: \"/about\",\n          passHref: true,\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n            _hover: {\n              bgColor: \"whiteAlpha.50\"\n            },\n            as: \"a\",\n            borderRadius: \"full\",\n            maxW: \"xs\",\n            overflow: \"hidden\",\n            sx: {\n              WebkitMaskImage: \"-webkit-radial-gradient(white, black)\",\n              MozBackfaceVisibility: \"hidden\",\n              WebkitBackfaceVisibility: \"hidden\",\n              MozTransform: \"translate3d(0, 0, 0)\",\n              WebkitTransform: \"translate3d(0, 0, 0)\"\n            },\n            transform: \"auto-gpu\",\n            transitionDuration: \"normal\",\n            transitionProperty: \"common\",\n            transitionTimingFunction: \"ease-out\",\n            children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_dato_image__WEBPACK_IMPORTED_MODULE_1__.default, {\n              data: (_data$site$favicon = data.site.favicon) === null || _data$site$favicon === void 0 ? void 0 : _data$site$favicon.responsiveImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, undefined)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, undefined)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Heading, {\n          size: \"3xl\",\n          children: \"Hey! I'm Rivaldi Putra.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Text, {\n          color: \"whiteAlpha.700\",\n          fontSize: [\"lg\", \"xl\"],\n          maxW: \"2xl\",\n          children: _generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.site.seo.fallback.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n          h: 8\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Text, {\n          pb: 8,\n          children: [\"Reach me via email at\", \" \", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Link, {\n            href: `mailto:${_generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.about.email}`,\n            variant: \"link\",\n            children: _generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.about.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, undefined), \", or Twitter at\", \" \", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Link, {\n            href: `https://twitter.com/${_generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.site.seo.twitterAccount}`,\n            isExternal: true,\n            variant: \"link\",\n            children: _generated_meta_json__WEBPACK_IMPORTED_MODULE_2__.site.seo.twitterAccount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, undefined), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, undefined)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, undefined)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, undefined)]\n  }, void 0, true);\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HomePage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/link.js":
/*!***************************************************!*\
  !*** ../../node_modules/next/dist/client/link.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"../../node_modules/next/dist/shared/lib/router/router.js\");\n\nvar _router1 = __webpack_require__(/*! ./router */ \"../../node_modules/next/dist/client/router.js\");\n\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"../../node_modules/next/dist/client/use-intersection.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst prefetched = {};\n\nfunction prefetch(router, href, as, options) {\n  if (true) return;\n  if (!(0, _router).isLocalURL(href)) return; // Prefetch the JSON page if asked (only in the client)\n  // We need to handle a prefetch error here since we may be\n  // loading with priority which can reject but we don't\n  // want to force navigation since this is only a prefetch\n\n  router.prefetch(href, as, options).catch(err => {\n    if (true) {\n      // rethrow to show invalid URL errors\n      throw err;\n    }\n  });\n  const curLocale = options && typeof options.locale !== 'undefined' ? options.locale : router && router.locale; // Join on an invalid URI character\n\n  prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')] = true;\n}\n\nfunction isModifiedEvent(event) {\n  const {\n    target\n  } = event.currentTarget;\n  return target && target !== '_self' || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\n\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale) {\n  const {\n    nodeName\n  } = e.currentTarget;\n\n  if (nodeName === 'A' && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n    // ignore click for browser’s default behavior\n    return;\n  }\n\n  e.preventDefault(); //  avoid scroll for urls with anchor refs\n\n  if (scroll == null && as.indexOf('#') >= 0) {\n    scroll = false;\n  } // replace state instead of push if prop is present\n\n\n  router[replace ? 'replace' : 'push'](href, as, {\n    shallow,\n    locale,\n    scroll\n  });\n}\n\nfunction Link(props) {\n  if (true) {\n    function createPropError(args) {\n      return new Error(`Failed prop type: The prop \\`${args.key}\\` expects a ${args.expected} in \\`<Link>\\`, but got \\`${args.actual}\\` instead.` + ( false ? 0 : ''));\n    } // TypeScript trick for type-guarding:\n\n\n    const requiredPropsGuard = {\n      href: true\n    };\n    const requiredProps = Object.keys(requiredPropsGuard);\n    requiredProps.forEach(key => {\n      if (key === 'href') {\n        if (props[key] == null || typeof props[key] !== 'string' && typeof props[key] !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: props[key] === null ? 'null' : typeof props[key]\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // TypeScript trick for type-guarding:\n\n    const optionalPropsGuard = {\n      as: true,\n      replace: true,\n      scroll: true,\n      shallow: true,\n      passHref: true,\n      prefetch: true,\n      locale: true\n    };\n    const optionalProps = Object.keys(optionalPropsGuard);\n    optionalProps.forEach(key => {\n      const valType = typeof props[key];\n\n      if (key === 'as') {\n        if (props[key] && valType !== 'string' && valType !== 'object') {\n          throw createPropError({\n            key,\n            expected: '`string` or `object`',\n            actual: valType\n          });\n        }\n      } else if (key === 'locale') {\n        if (props[key] && valType !== 'string') {\n          throw createPropError({\n            key,\n            expected: '`string`',\n            actual: valType\n          });\n        }\n      } else if (key === 'replace' || key === 'scroll' || key === 'shallow' || key === 'passHref' || key === 'prefetch') {\n        if (props[key] != null && valType !== 'boolean') {\n          throw createPropError({\n            key,\n            expected: '`boolean`',\n            actual: valType\n          });\n        }\n      } else {\n        // TypeScript trick for type-guarding:\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _ = key;\n      }\n    }); // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    const hasWarned = _react.default.useRef(false);\n\n    if (props.prefetch && !hasWarned.current) {\n      hasWarned.current = true;\n      console.warn('Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated');\n    }\n  }\n\n  const p = props.prefetch !== false;\n  const router = (0, _router1).useRouter();\n\n  const {\n    href,\n    as\n  } = _react.default.useMemo(() => {\n    const [resolvedHref, resolvedAs] = (0, _router).resolveHref(router, props.href, true);\n    return {\n      href: resolvedHref,\n      as: props.as ? (0, _router).resolveHref(router, props.as) : resolvedAs || resolvedHref\n    };\n  }, [router, props.href, props.as]);\n\n  let {\n    children,\n    replace,\n    shallow,\n    scroll,\n    locale\n  } = props; // Deprecated. Warning shown by propType check. If the children provided is a string (<Link>example</Link>) we wrap it in an <a> tag\n\n  if (typeof children === 'string') {\n    children = /*#__PURE__*/_react.default.createElement(\"a\", null, children);\n  } // This will return the first child, if multiple are provided it will throw an error\n\n\n  let child;\n\n  if (true) {\n    try {\n      child = _react.default.Children.only(children);\n    } catch (err) {\n      throw new Error(`Multiple children were passed to <Link> with \\`href\\` of \\`${props.href}\\` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children` + ( false ? 0 : ''));\n    }\n  } else {}\n\n  const childRef = child && typeof child === 'object' && child.ref;\n  const [setIntersectionRef, isVisible] = (0, _useIntersection).useIntersection({\n    rootMargin: '200px'\n  });\n\n  const setRef = _react.default.useCallback(el => {\n    setIntersectionRef(el);\n\n    if (childRef) {\n      if (typeof childRef === 'function') childRef(el);else if (typeof childRef === 'object') {\n        childRef.current = el;\n      }\n    }\n  }, [childRef, setIntersectionRef]);\n\n  _react.default.useEffect(() => {\n    const shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale;\n    const isPrefetched = prefetched[href + '%' + as + (curLocale ? '%' + curLocale : '')];\n\n    if (shouldPrefetch && !isPrefetched) {\n      prefetch(router, href, as, {\n        locale: curLocale\n      });\n    }\n  }, [as, href, isVisible, locale, p, router]);\n\n  const childProps = {\n    ref: setRef,\n    onClick: e => {\n      if (child.props && typeof child.props.onClick === 'function') {\n        child.props.onClick(e);\n      }\n\n      if (!e.defaultPrevented) {\n        linkClicked(e, router, href, as, replace, shallow, scroll, locale);\n      }\n    }\n  };\n\n  childProps.onMouseEnter = e => {\n    if (!(0, _router).isLocalURL(href)) return;\n\n    if (child.props && typeof child.props.onMouseEnter === 'function') {\n      child.props.onMouseEnter(e);\n    }\n\n    prefetch(router, href, as, {\n      priority: true\n    });\n  }; // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n  // defined, we specify the current 'href', so that repetition is not needed by the user\n\n\n  if (props.passHref || child.type === 'a' && !('href' in child.props)) {\n    const curLocale = typeof locale !== 'undefined' ? locale : router && router.locale; // we only render domain locales if we are currently on a domain locale\n    // so that locale links are still visitable in development/preview envs\n\n    const localeDomain = router && router.isLocaleDomain && (0, _router).getDomainLocale(as, curLocale, router && router.locales, router && router.domainLocales);\n    childProps.href = localeDomain || (0, _router).addBasePath((0, _router).addLocale(as, curLocale, router && router.defaultLocale));\n  }\n\n  return /*#__PURE__*/_react.default.cloneElement(child, childProps);\n}\n\nvar _default = Link;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/normalize-trailing-slash.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.removePathTrailingSlash = removePathTrailingSlash;\nexports.normalizePathTrailingSlash = void 0;\n\nfunction removePathTrailingSlash(path) {\n  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;\n}\n\nconst normalizePathTrailingSlash =  false ? 0 : removePathTrailingSlash;\nexports.normalizePathTrailingSlash = normalizePathTrailingSlash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCwrQkFBQSxHQUFrQ0UsdUJBQWxDO0FBQ0FGLGtDQUFBLEdBQXFDLEtBQUssQ0FBMUM7O0FBQ0EsU0FBU0UsdUJBQVQsQ0FBaUNFLElBQWpDLEVBQXVDO0FBQ25DLFNBQU9BLElBQUksQ0FBQ0MsUUFBTCxDQUFjLEdBQWQsS0FBc0JELElBQUksS0FBSyxHQUEvQixHQUFxQ0EsSUFBSSxDQUFDRSxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQUMsQ0FBZixDQUFyQyxHQUF5REYsSUFBaEU7QUFDSDs7QUFDRCxNQUFNRCwwQkFBMEIsR0FBR0ksTUFBQSxHQUFxQ0gsQ0FBckMsR0FRL0JGLHVCQVJKO0FBU0FGLGtDQUFBLEdBQXFDRywwQkFBckMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ3Jpa29tc24vdjcvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvbm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzPzY2YzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoID0gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2g7XG5leHBvcnRzLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuZnVuY3Rpb24gcmVtb3ZlUGF0aFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICAgIHJldHVybiBwYXRoLmVuZHNXaXRoKCcvJykgJiYgcGF0aCAhPT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuY29uc3Qgbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSBwcm9jZXNzLmVudi5fX05FWFRfVFJBSUxJTkdfU0xBU0ggPyAocGF0aCk9PntcbiAgICBpZiAoL1xcLlteL10rXFwvPyQvLnRlc3QocGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoKHBhdGgpO1xuICAgIH0gZWxzZSBpZiAocGF0aC5lbmRzV2l0aCgnLycpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXRoICsgJy8nO1xuICAgIH1cbn0gOiByZW1vdmVQYXRoVHJhaWxpbmdTbGFzaDtcbmV4cG9ydHMubm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSBub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlbW92ZVBhdGhUcmFpbGluZ1NsYXNoIiwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2giLCJwYXRoIiwiZW5kc1dpdGgiLCJzbGljZSIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfVFJBSUxJTkdfU0xBU0giLCJ0ZXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/request-idle-callback.js":
/*!********************************************************************!*\
  !*** ../../node_modules/next/dist/client/request-idle-callback.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.requestIdleCallback = exports.cancelIdleCallback = void 0;\n\nconst requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function (cb) {\n  let start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n};\n\nexports.requestIdleCallback = requestIdleCallback;\n\nconst cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function (id) {\n  return clearTimeout(id);\n};\n\nexports.cancelIdleCallback = cancelIdleCallback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCwyQkFBQSxHQUE4QkEsMEJBQUEsR0FBNkIsS0FBSyxDQUFoRTs7QUFDQSxNQUFNRSxtQkFBbUIsR0FBRyxPQUFPRSxJQUFQLEtBQWdCLFdBQWhCLElBQStCQSxJQUFJLENBQUNGLG1CQUFwQyxJQUEyREUsSUFBSSxDQUFDRixtQkFBTCxDQUF5QkcsSUFBekIsQ0FBOEJDLE1BQTlCLENBQTNELElBQW9HLFVBQVNDLEVBQVQsRUFBYTtBQUN6SSxNQUFJQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxFQUFaO0FBQ0EsU0FBT0MsVUFBVSxDQUFDLFlBQVc7QUFDekJKLElBQUFBLEVBQUUsQ0FBQztBQUNDSyxNQUFBQSxVQUFVLEVBQUUsS0FEYjtBQUVDQyxNQUFBQSxhQUFhLEVBQUUsWUFBVztBQUN0QixlQUFPQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksTUFBTU4sSUFBSSxDQUFDQyxHQUFMLEtBQWFGLEtBQW5CLENBQVosQ0FBUDtBQUNIO0FBSkYsS0FBRCxDQUFGO0FBTUgsR0FQZ0IsRUFPZCxDQVBjLENBQWpCO0FBUUgsQ0FWRDs7QUFXQVIsMkJBQUEsR0FBOEJFLG1CQUE5Qjs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxPQUFPQyxJQUFQLEtBQWdCLFdBQWhCLElBQStCQSxJQUFJLENBQUNELGtCQUFwQyxJQUEwREMsSUFBSSxDQUFDRCxrQkFBTCxDQUF3QkUsSUFBeEIsQ0FBNkJDLE1BQTdCLENBQTFELElBQWtHLFVBQVNVLEVBQVQsRUFBYTtBQUN0SSxTQUFPQyxZQUFZLENBQUNELEVBQUQsQ0FBbkI7QUFDSCxDQUZEOztBQUdBaEIsMEJBQUEsR0FBNkJHLGtCQUE3QiIsInNvdXJjZXMiOlsid2VicGFjazovL0Bncmlrb21zbi92Ny8uLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanM/NjVlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVxdWVzdElkbGVDYWxsYmFjayA9IGV4cG9ydHMuY2FuY2VsSWRsZUNhbGxiYWNrID0gdm9pZCAwO1xuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihjYikge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGNiKHtcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBzdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCAxKTtcbn07XG5leHBvcnRzLnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuY29uc3QgY2FuY2VsSWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcbmV4cG9ydHMuY2FuY2VsSWRsZUNhbGxiYWNrID0gY2FuY2VsSWRsZUNhbGxiYWNrO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInNlbGYiLCJiaW5kIiwid2luZG93IiwiY2IiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJNYXRoIiwibWF4IiwiaWQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/route-loader.js":
/*!***********************************************************!*\
  !*** ../../node_modules/next/dist/client/route-loader.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.markAssetError = markAssetError;\nexports.isAssetError = isAssetError;\nexports.getClientBuildManifest = getClientBuildManifest;\nexports.createRouteLoader = createRouteLoader;\n\nvar _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/utils/get-asset-path-from-route */ \"../shared/lib/router/utils/get-asset-path-from-route\"));\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"../../node_modules/next/dist/client/request-idle-callback.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive\n// considers as \"Good\" time-to-interactive. We must assume something went\n// wrong beyond this point, and then fall-back to a full page transition to\n// show the user something of value.\n\n\nconst MS_MAX_IDLE_DELAY = 3800;\n\nfunction withFuture(key, map, generator) {\n  let entry = map.get(key);\n\n  if (entry) {\n    if ('future' in entry) {\n      return entry.future;\n    }\n\n    return Promise.resolve(entry);\n  }\n\n  let resolver;\n  const prom = new Promise(resolve => {\n    resolver = resolve;\n  });\n  map.set(key, entry = {\n    resolve: resolver,\n    future: prom\n  });\n  return generator ? generator().then(value => (resolver(value), value)) : prom;\n}\n\nfunction hasPrefetch(link) {\n  try {\n    link = document.createElement('link');\n    return (// detect IE11 since it supports prefetch but isn't detected\n      // with relList.support\n      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst canPrefetch = hasPrefetch();\n\nfunction prefetchViaDom(href, as, link) {\n  return new Promise((res, rej) => {\n    if (document.querySelector(`link[rel=\"prefetch\"][href^=\"${href}\"]`)) {\n      return res();\n    }\n\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = `prefetch`;\n    link.crossOrigin = undefined;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nconst ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR');\n\nfunction markAssetError(err) {\n  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});\n}\n\nfunction isAssetError(err) {\n  return err && ASSET_LOAD_ERROR in err;\n}\n\nfunction appendScript(src, script) {\n  return new Promise((resolve, reject) => {\n    script = document.createElement('script'); // The order of property assignment here is intentional.\n    // 1. Setup success/failure hooks in case the browser synchronously\n    //    executes when `src` is set.\n\n    script.onload = resolve;\n\n    script.onerror = () => reject(markAssetError(new Error(`Failed to load script: ${src}`))); // 2. Configure the cross-origin attribute before setting `src` in case the\n    //    browser begins to fetch.\n\n\n    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child\n    //    must be appended for fetching to start.\n\n    script.src = src;\n    document.body.appendChild(script);\n  });\n} // We wait for pages to be built in dev before we start the route transition\n// timeout to prevent an un-necessary hard navigation in development.\n\n\nlet devBuildPromise; // Resolve a promise that times out after given amount of milliseconds.\n\nfunction resolvePromiseWithTimeout(p, ms, err) {\n  return new Promise((resolve, reject) => {\n    let cancelled = false;\n    p.then(r => {\n      // Resolved, cancel the timeout\n      cancelled = true;\n      resolve(r);\n    }).catch(reject); // We wrap these checks separately for better dead-code elimination in\n    // production bundles.\n\n    if (true) {\n      (devBuildPromise || Promise.resolve()).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => setTimeout(() => {\n          if (!cancelled) {\n            reject(err);\n          }\n        }, ms));\n      });\n    }\n\n    if (false) {}\n  });\n}\n\nfunction getClientBuildManifest() {\n  if (self.__BUILD_MANIFEST) {\n    return Promise.resolve(self.__BUILD_MANIFEST);\n  }\n\n  const onBuildManifest = new Promise(resolve => {\n    // Mandatory because this is not concurrent safe:\n    const cb = self.__BUILD_MANIFEST_CB;\n\n    self.__BUILD_MANIFEST_CB = () => {\n      resolve(self.__BUILD_MANIFEST);\n      cb && cb();\n    };\n  });\n  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));\n}\n\nfunction getFilesForRoute(assetPrefix, route) {\n  if (true) {\n    return Promise.resolve({\n      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute).default(route, '.js'))],\n      // Styles are handled by `style-loader` in development:\n      css: []\n    });\n  }\n\n  return getClientBuildManifest().then(manifest => {\n    if (!(route in manifest)) {\n      throw markAssetError(new Error(`Failed to lookup route: ${route}`));\n    }\n\n    const allFiles = manifest[route].map(entry => assetPrefix + '/_next/' + encodeURI(entry));\n    return {\n      scripts: allFiles.filter(v => v.endsWith('.js')),\n      css: allFiles.filter(v => v.endsWith('.css'))\n    };\n  });\n}\n\nfunction createRouteLoader(assetPrefix) {\n  const entrypoints = new Map();\n  const loadedScripts = new Map();\n  const styleSheets = new Map();\n  const routes = new Map();\n\n  function maybeExecuteScript(src) {\n    let prom = loadedScripts.get(src);\n\n    if (prom) {\n      return prom;\n    } // Skip executing script if it's already in the DOM:\n\n\n    if (document.querySelector(`script[src^=\"${src}\"]`)) {\n      return Promise.resolve();\n    }\n\n    loadedScripts.set(src, prom = appendScript(src));\n    return prom;\n  }\n\n  function fetchStyleSheet(href) {\n    let prom = styleSheets.get(href);\n\n    if (prom) {\n      return prom;\n    }\n\n    styleSheets.set(href, prom = fetch(href).then(res => {\n      if (!res.ok) {\n        throw new Error(`Failed to load stylesheet: ${href}`);\n      }\n\n      return res.text().then(text => ({\n        href: href,\n        content: text\n      }));\n    }).catch(err => {\n      throw markAssetError(err);\n    }));\n    return prom;\n  }\n\n  return {\n    whenEntrypoint(route) {\n      return withFuture(route, entrypoints);\n    },\n\n    onEntrypoint(route, execute) {\n      Promise.resolve(execute).then(fn => fn()).then(exports => ({\n        component: exports && exports.default || exports,\n        exports: exports\n      }), err => ({\n        error: err\n      })).then(input => {\n        const old = entrypoints.get(route);\n        entrypoints.set(route, input);\n        if (old && 'resolve' in old) old.resolve(input);\n      });\n    },\n\n    loadRoute(route, prefetch) {\n      return withFuture(route, routes, () => {\n        const routeFilesPromise = getFilesForRoute(assetPrefix, route).then(({\n          scripts,\n          css\n        }) => {\n          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);\n        }).then(res => {\n          return this.whenEntrypoint(route).then(entrypoint => ({\n            entrypoint,\n            styles: res[1]\n          }));\n        });\n\n        if (true) {\n          devBuildPromise = new Promise(resolve => {\n            if (routeFilesPromise) {\n              return routeFilesPromise.finally(() => {\n                resolve();\n              });\n            }\n          });\n        }\n\n        return resolvePromiseWithTimeout(routeFilesPromise, MS_MAX_IDLE_DELAY, markAssetError(new Error(`Route did not complete loading: ${route}`))).then(({\n          entrypoint,\n          styles\n        }) => {\n          const res = Object.assign({\n            styles: styles\n          }, entrypoint);\n          return 'error' in entrypoint ? entrypoint : res;\n        }).catch(err => {\n          if (prefetch) {\n            // we don't want to cache errors during prefetch\n            throw err;\n          }\n\n          return {\n            error: err\n          };\n        });\n      });\n    },\n\n    prefetch(route) {\n      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n      // License: Apache 2.0\n      let cn;\n\n      if (cn = navigator.connection) {\n        // Don't prefetch if using 2G or if Save-Data is enabled.\n        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n      }\n\n      return getFilesForRoute(assetPrefix, route).then(output => Promise.all(canPrefetch ? output.scripts.map(script => prefetchViaDom(script, 'script')) : [])).then(() => {\n        (0, _requestIdleCallback).requestIdleCallback(() => this.loadRoute(route, true).catch(() => {}));\n      }).catch( // swallow prefetch errors\n      () => {});\n    }\n\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/route-loader.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/router.js":
/*!*****************************************************!*\
  !*** ../../node_modules/next/dist/client/router.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"Router\", ({\n  enumerable: true,\n  get: function () {\n    return _router.default;\n  }\n}));\nObject.defineProperty(exports, \"withRouter\", ({\n  enumerable: true,\n  get: function () {\n    return _withRouter.default;\n  }\n}));\nexports.useRouter = useRouter;\nexports.createRouter = createRouter;\nexports.makePublicRouterInstance = makePublicRouterInstance;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = _interopRequireDefault(__webpack_require__(/*! ../shared/lib/router/router */ \"../../node_modules/next/dist/shared/lib/router/router.js\"));\n\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\n\nvar _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ \"../../node_modules/next/dist/client/with-router.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst singletonRouter = {\n  router: null,\n  readyCallbacks: [],\n\n  ready(cb) {\n    if (this.router) return cb();\n\n    if (false) {}\n  }\n\n}; // Create public properties and methods of the router in the singletonRouter\n\nconst urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain', 'domainLocales'];\nconst routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];\nconst coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it\n\nObject.defineProperty(singletonRouter, 'events', {\n  get() {\n    return _router.default.events;\n  }\n\n});\nurlPropertyFields.forEach(field => {\n  // Here we need to use Object.defineProperty because we need to return\n  // the property assigned to the actual router\n  // The value might get changed as we change routes and this is the\n  // proper way to access it\n  Object.defineProperty(singletonRouter, field, {\n    get() {\n      const router = getRouter();\n      return router[field];\n    }\n\n  });\n});\ncoreMethodFields.forEach(field => {\n  singletonRouter[field] = (...args) => {\n    const router = getRouter();\n    return router[field](...args);\n  };\n});\nrouterEvents.forEach(event => {\n  singletonRouter.ready(() => {\n    _router.default.events.on(event, (...args) => {\n      const eventField = `on${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n      const _singletonRouter = singletonRouter;\n\n      if (_singletonRouter[eventField]) {\n        try {\n          _singletonRouter[eventField](...args);\n        } catch (err) {\n          console.error(`Error when running the Router event: ${eventField}`);\n          console.error(`${err.message}\\n${err.stack}`);\n        }\n      }\n    });\n  });\n});\n\nfunction getRouter() {\n  if (!singletonRouter.router) {\n    const message = 'No router instance found.\\n' + 'You should only use \"next/router\" on the client side of your app.\\n';\n    throw new Error(message);\n  }\n\n  return singletonRouter.router;\n}\n\nvar _default = singletonRouter;\nexports.default = _default;\n\nfunction useRouter() {\n  return _react.default.useContext(_routerContext.RouterContext);\n}\n\nfunction createRouter(...args) {\n  singletonRouter.router = new _router.default(...args);\n  singletonRouter.readyCallbacks.forEach(cb => cb());\n  singletonRouter.readyCallbacks = [];\n  return singletonRouter.router;\n}\n\nfunction makePublicRouterInstance(router) {\n  const _router1 = router;\n  const instance = {};\n\n  for (const property of urlPropertyFields) {\n    if (typeof _router1[property] === 'object') {\n      instance[property] = Object.assign(Array.isArray(_router1[property]) ? [] : {}, _router1[property]) // makes sure query is not stateful\n      ;\n      continue;\n    }\n\n    instance[property] = _router1[property];\n  } // Events is a static property on the router, the router doesn't have to be initialized to use it\n\n\n  instance.events = _router.default.events;\n  coreMethodFields.forEach(field => {\n    instance[field] = (...args) => {\n      return _router1[field](...args);\n    };\n  });\n  return instance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/router.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/use-intersection.js":
/*!***************************************************************!*\
  !*** ../../node_modules/next/dist/client/use-intersection.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.useIntersection = useIntersection;\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ \"../../node_modules/next/dist/client/request-idle-callback.js\");\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined';\n\nfunction useIntersection({\n  rootMargin,\n  disabled\n}) {\n  const isDisabled = disabled || !hasIntersectionObserver;\n  const unobserve = (0, _react).useRef();\n  const [visible, setVisible] = (0, _react).useState(false);\n  const setRef = (0, _react).useCallback(el => {\n    if (unobserve.current) {\n      unobserve.current();\n      unobserve.current = undefined;\n    }\n\n    if (isDisabled || visible) return;\n\n    if (el && el.tagName) {\n      unobserve.current = observe(el, isVisible => isVisible && setVisible(isVisible), {\n        rootMargin\n      });\n    }\n  }, [isDisabled, rootMargin, visible]);\n  (0, _react).useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) {\n        const idleCallback = (0, _requestIdleCallback).requestIdleCallback(() => setVisible(true));\n        return () => (0, _requestIdleCallback).cancelIdleCallback(idleCallback);\n      }\n    }\n  }, [visible]);\n  return [setRef, visible];\n}\n\nfunction observe(element, callback, options) {\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  elements.set(element, callback);\n  observer.observe(element);\n  return function unobserve() {\n    elements.delete(element);\n    observer.unobserve(element); // Destroy observer when there's nothing left to watch:\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observers.delete(id);\n    }\n  };\n}\n\nconst observers = new Map();\n\nfunction createObserver(options) {\n  const id = options.rootMargin || '';\n  let instance = observers.get(id);\n\n  if (instance) {\n    return instance;\n  }\n\n  const elements = new Map();\n  const observer = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      const callback = elements.get(entry.target);\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n\n      if (callback && isVisible) {\n        callback(isVisible);\n      }\n    });\n  }, options);\n  observers.set(id, instance = {\n    id,\n    observer,\n    elements\n  });\n  return instance;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/client/with-router.js":
/*!**********************************************************!*\
  !*** ../../node_modules/next/dist/client/with-router.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = withRouter;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _router = __webpack_require__(/*! ./router */ \"../../node_modules/next/dist/client/router.js\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction withRouter(ComposedComponent) {\n  function WithRouterWrapper(props) {\n    return /*#__PURE__*/_react.default.createElement(ComposedComponent, Object.assign({\n      router: (0, _router).useRouter()\n    }, props));\n  }\n\n  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps;\n  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;\n\n  if (true) {\n    const name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';\n    WithRouterWrapper.displayName = `withRouter(${name})`;\n  }\n\n  return WithRouterWrapper;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvd2l0aC1yb3V0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztBQUN6Q0csRUFBQUEsS0FBSyxFQUFFO0FBRGtDLENBQTdDO0FBR0FELGVBQUEsR0FBa0JHLFVBQWxCOztBQUNBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLG1CQUFPLENBQUMsb0JBQUQsQ0FBUixDQUFuQzs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsK0RBQUQsQ0FBckI7O0FBQ0EsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQ2pDLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUNqQ04sSUFBQUEsT0FBTyxFQUFFTTtBQUR3QixHQUFyQztBQUdIOztBQUNELFNBQVNMLFVBQVQsQ0FBb0JPLGlCQUFwQixFQUF1QztBQUNuQyxXQUFTQyxpQkFBVCxDQUEyQkMsS0FBM0IsRUFBa0M7QUFDOUIsV0FBTyxhQUFjUixNQUFNLENBQUNGLE9BQVAsQ0FBZVcsYUFBZixDQUE2QkgsaUJBQTdCLEVBQWdEWixNQUFNLENBQUNnQixNQUFQLENBQWM7QUFDL0VDLE1BQUFBLE1BQU0sRUFBRSxDQUFDLEdBQUdSLE9BQUosRUFBYVMsU0FBYjtBQUR1RSxLQUFkLEVBRWxFSixLQUZrRSxDQUFoRCxDQUFyQjtBQUdIOztBQUNERCxFQUFBQSxpQkFBaUIsQ0FBQ00sZUFBbEIsR0FBb0NQLGlCQUFpQixDQUFDTyxlQUF0RDtBQUNBTixFQUFBQSxpQkFBaUIsQ0FBQ08sbUJBQWxCLEdBQXdDUixpQkFBaUIsQ0FBQ1EsbUJBQTFEOztBQUNBLFlBQTJDO0FBQ3ZDLFVBQU1DLElBQUksR0FBR1QsaUJBQWlCLENBQUNVLFdBQWxCLElBQWlDVixpQkFBaUIsQ0FBQ1MsSUFBbkQsSUFBMkQsU0FBeEU7QUFDQVIsSUFBQUEsaUJBQWlCLENBQUNTLFdBQWxCLEdBQWlDLGNBQWFELElBQUssR0FBbkQ7QUFDSDs7QUFDRCxTQUFPUixpQkFBUDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGdyaWtvbXNuL3Y3Ly4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3dpdGgtcm91dGVyLmpzP2Q4YzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoUm91dGVyO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcm91dGVyID0gcmVxdWlyZShcIi4vcm91dGVyXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xufVxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb3NlZENvbXBvbmVudCkge1xuICAgIGZ1bmN0aW9uIFdpdGhSb3V0ZXJXcmFwcGVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybigvKiNfX1BVUkVfXyovIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9zZWRDb21wb25lbnQsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgcm91dGVyOiAoMCwgX3JvdXRlcikudXNlUm91dGVyKClcbiAgICAgICAgfSwgcHJvcHMpKSk7XG4gICAgfVxuICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmdldEluaXRpYWxQcm9wcyA9IENvbXBvc2VkQ29tcG9uZW50LmdldEluaXRpYWxQcm9wcztcbiAgICBXaXRoUm91dGVyV3JhcHBlci5vcmlnR2V0SW5pdGlhbFByb3BzID0gQ29tcG9zZWRDb21wb25lbnQub3JpZ0dldEluaXRpYWxQcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zdCBuYW1lID0gQ29tcG9zZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9zZWRDb21wb25lbnQubmFtZSB8fCAnVW5rbm93bic7XG4gICAgICAgIFdpdGhSb3V0ZXJXcmFwcGVyLmRpc3BsYXlOYW1lID0gYHdpdGhSb3V0ZXIoJHtuYW1lfSlgO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJvdXRlcldyYXBwZXI7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGgtcm91dGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJ3aXRoUm91dGVyIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcm91dGVyIiwib2JqIiwiX19lc01vZHVsZSIsIkNvbXBvc2VkQ29tcG9uZW50IiwiV2l0aFJvdXRlcldyYXBwZXIiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJhc3NpZ24iLCJyb3V0ZXIiLCJ1c2VSb3V0ZXIiLCJnZXRJbml0aWFsUHJvcHMiLCJvcmlnR2V0SW5pdGlhbFByb3BzIiwibmFtZSIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/client/with-router.js\n");

/***/ }),

/***/ "../../node_modules/next/dist/shared/lib/router/router.js":
/*!****************************************************************!*\
  !*** ../../node_modules/next/dist/shared/lib/router/router.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports.default = void 0;\n\nvar _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ \"../../node_modules/next/dist/client/normalize-trailing-slash.js\");\n\nvar _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ \"../../node_modules/next/dist/client/route-loader.js\");\n\nvar _denormalizePagePath = __webpack_require__(/*! ../../../server/denormalize-page-path */ \"../../../server/denormalize-page-path\");\n\nvar _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../i18n/normalize-locale-path\");\n\nvar _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ \"../mitt\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../shared/lib/utils\");\n\nvar _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ \"./utils/parse-relative-url\");\n\nvar _querystring = __webpack_require__(/*! ./utils/querystring */ \"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ \"?ba11\"));\n\nvar _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ \"./utils/route-matcher\");\n\nvar _routeRegex = __webpack_require__(/*! ./utils/route-regex */ \"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet detectDomainLocale;\n\nif (false) {}\n\nconst basePath =  false || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash).normalizePathTrailingSlash(prefix) : `${prefix}${pathNoQueryHash(path) === '/' ? path.substring(1) : path}` : path;\n}\n\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n  if (false) {} else {\n    return false;\n  }\n}\n\nfunction addLocale(path, locale, defaultLocale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction delLocale(path, locale) {\n  if (false) {}\n\n  return path;\n}\n\nfunction pathNoQueryHash(path) {\n  const queryIndex = path.indexOf('?');\n  const hashIndex = path.indexOf('#');\n\n  if (queryIndex > -1 || hashIndex > -1) {\n    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);\n  }\n\n  return path;\n}\n\nfunction hasBasePath(path) {\n  path = pathNoQueryHash(path);\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\n\nfunction delBasePath(path) {\n  path = path.slice(basePath.length);\n  if (!path.startsWith('/')) path = `/${path}`;\n  return path;\n}\n\nfunction isLocalURL(url) {\n  // prevent a hydration mismatch on href for url with anchor refs\n  if (url.startsWith('/') || url.startsWith('#') || url.startsWith('?')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils).getLocationOrigin();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex).getRouteRegex(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches = // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher).getRouteMatcher(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present\n    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just\n    // path delimiter escaped since they are being inserted\n    // into the URL and we expect URL encoded segments\n    // when parsing dynamic route params\n    segment => encodeURIComponent(segment)).join('/') : encodeURIComponent(value)) || '/');\n  })) {\n    interpolatedRoute = '' // did not satisfy all requirements\n    ; // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\n\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n}\n\nfunction resolveHref(router, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  let base;\n  let urlAsString = typeof href === 'string' ? href : (0, _utils).formatWithValidation(href); // repeated slashes and backslashes in the URL are considered\n  // invalid and will never match a Next.js page/file\n\n  const urlProtoMatch = urlAsString.match(/^[a-zA-Z]{1,}:\\/\\//);\n  const urlAsStringNoProto = urlProtoMatch ? urlAsString.substr(urlProtoMatch[0].length) : urlAsString;\n  const urlParts = urlAsStringNoProto.split('?');\n\n  if ((urlParts[0] || '').match(/(\\/\\/|\\\\)/)) {\n    console.error(`Invalid href passed to next/router: ${urlAsString}, repeated forward-slashes (//) or backslashes \\\\ are not valid in the href`);\n    const normalizedUrl = (0, _utils).normalizeRepeatedSlashes(urlAsStringNoProto);\n    urlAsString = (urlProtoMatch ? urlProtoMatch[0] : '') + normalizedUrl;\n  } // Return because it cannot be routed by the Next.js router\n\n\n  if (!isLocalURL(urlAsString)) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n\n  try {\n    base = new URL(urlAsString.startsWith('#') ? router.asPath : router.pathname, 'http://n');\n  } catch (_) {\n    // fallback to / for invalid asPath values e.g. //\n    base = new URL('/', 'http://n');\n  }\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash).normalizePathTrailingSlash(finalUrl.pathname);\n    let interpolatedAs = '';\n\n    if ((0, _isDynamic).isDynamicRoute(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring).searchParamsToUrlQuery(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n\n      if (result) {\n        interpolatedAs = (0, _utils).formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n\n\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\n\nfunction stripOrigin(url) {\n  const origin = (0, _utils).getLocationOrigin();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = resolveHref(router, url, true);\n  const origin = (0, _utils).getLocationOrigin();\n  const hrefHadOrigin = resolvedHref.startsWith(origin);\n  const asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);\n  const preparedAs = as ? stripOrigin(resolveHref(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _denormalizePagePath).denormalizePagePath(pathname));\n\n  if (cleanPathname === '/404' || cleanPathname === '/_error') {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isDynamic).isDynamicRoute(page) && (0, _routeRegex).getRouteRegex(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname);\n}\n\nconst manualScrollRestoration =  false && 0;\nconst SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      if (res.status === 404) {\n        return res.json().then(data => {\n          if (data.notFound) {\n            return {\n              notFound: SSG_DATA_NOT_FOUND\n            };\n          }\n\n          throw new Error(`Failed to load static props`);\n        });\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      (0, _routeLoader).markAssetError(err);\n    }\n\n    throw err;\n  });\n}\n\nclass Router {\n  constructor(pathname1, query1, as1, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component: Component1,\n    err: err1,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview\n  }) {\n    // Static Data Cache\n    this.sdc = {}; // In-flight Server Data Requests, for deduping\n\n    this.sdr = {};\n    this._idx = 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname: pathname1,\n          query: query1\n        } = this;\n        this.changeState('replaceState', (0, _utils).formatWithValidation({\n          pathname: addBasePath(pathname1),\n          query: query1\n        }), (0, _utils).getURL());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      let forcedScroll;\n      const {\n        url,\n        as: as1,\n        options,\n        idx\n      } = state;\n\n      if (false) {}\n\n      this._idx = idx;\n      const {\n        pathname: pathname1\n      } = (0, _parseRelativeUrl).parseRelativeUrl(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as1 === this.asPath && pathname1 === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as1, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname1 !== '/_error') {\n      this.components[this.route] = {\n        Component: Component1,\n        initial: true,\n        props: initialProps,\n        err: err1,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: []\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname1;\n    this.query = query1; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    const autoExportDynamic = (0, _isDynamic).isDynamicRoute(pathname1) && self.__NEXT_DATA__.autoExport;\n\n    this.asPath = autoExportDynamic ? pathname1 : as1;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n    this.isPreview = !!isPreview;\n    this.isLocaleDomain = false;\n\n    if (false) {}\n\n    if (false) {}\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as, options = {}) {\n    if (false) {}\n\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as, options = {}) {\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options, forcedScroll) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    const shouldResolveHref = url === as || options._h || options._shouldResolveHref; // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n\n    if (options._h) {\n      this.isReady = true;\n    }\n\n    const prevLocale = this.locale;\n\n    if (false) { var ref; }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    const {\n      shallow = false\n    } = options;\n    const routeProps = {\n      shallow\n    };\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute, routeProps);\n    }\n\n    as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n    this._inFlightRoute = as;\n    let localeChange = prevLocale !== this.locale; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route], null);\n      Router.events.emit('hashChangeComplete', as, routeProps);\n      return true;\n    }\n\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname: pathname1,\n      query: query1\n    } = parsed; // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n    let pages, rewrites;\n\n    try {\n      pages = await this.pageLoader.getPageList();\n      ({\n        __rewrites: rewrites\n      } = await (0, _routeLoader).getClientBuildManifest());\n    } catch (err1) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      window.location.href = as;\n      return false;\n    } // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = 'replaceState';\n    } // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n\n    let resolvedAs = as; // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname1 = pathname1 ? (0, _normalizeTrailingSlash).removePathTrailingSlash(delBasePath(pathname1)) : pathname1;\n\n    if (shouldResolveHref && pathname1 !== '/_error') {\n      options._shouldResolveHref = true;\n\n      if (false) {} else {\n        parsed.pathname = resolveDynamicRoute(pathname1, pages);\n\n        if (parsed.pathname !== pathname1) {\n          pathname1 = parsed.pathname;\n          parsed.pathname = addBasePath(pathname1);\n          url = (0, _utils).formatWithValidation(parsed);\n        }\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname1);\n\n    if (!isLocalURL(as)) {\n      if (true) {\n        throw new Error(`Invalid href: \"${url}\" and as: \"${as}\", received relative href and external as` + `\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as`);\n      }\n\n      window.location.href = as;\n      return false;\n    }\n\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n\n    if ((0, _isDynamic).isDynamicRoute(route)) {\n      const parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex).getRouteRegex(route);\n      const routeMatch = (0, _routeMatcher).getRouteMatcher(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query1) : {};\n\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query1[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://nextjs.org/docs/messages/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _utils).formatWithValidation(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query1, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query1, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as, routeProps);\n\n    try {\n      var ref, ref1;\n      let routeInfo = await this.getRouteInfo(route, pathname1, query1, as, resolvedAs, routeProps);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n\n      if ((__N_SSG || __N_SSP) && props) {\n        if (props.pageProps && props.pageProps.__N_REDIRECT) {\n          const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n\n          if (destination.startsWith('/')) {\n            const parsedHref = (0, _parseRelativeUrl).parseRelativeUrl(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n\n          window.location.href = destination;\n          return new Promise(() => {});\n        }\n\n        this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404\n\n        if (props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n\n          try {\n            await this.fetchComponent('/404');\n            notFoundRoute = '/404';\n          } catch (_) {\n            notFoundRoute = '/_error';\n          }\n\n          routeInfo = await this.getRouteInfo(notFoundRoute, notFoundRoute, query1, as, resolvedAs, {\n            shallow: false\n          });\n        }\n      }\n\n      Router.events.emit('beforeHistoryChange', as, routeProps);\n      this.changeState(method, url, as, options);\n\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n\n      if (options._h && pathname1 === '/_error' && ((ref = self.__NEXT_DATA__.props) === null || ref === void 0 ? void 0 : (ref1 = ref.pageProps) === null || ref1 === void 0 ? void 0 : ref1.statusCode) === 500 && (props === null || props === void 0 ? void 0 : props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        props.pageProps.statusCode = 500;\n      } // shallow routing is only allowed for same page URL changes.\n\n\n      const isValidShallowRoute = options.shallow && this.route === route;\n\n      var _scroll;\n\n      const shouldScroll = (_scroll = options.scroll) !== null && _scroll !== void 0 ? _scroll : !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      await this.set(route, pathname1, query1, cleanedAs, routeInfo, forcedScroll !== null && forcedScroll !== void 0 ? forcedScroll : resetScroll).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs, routeProps);\n        throw error;\n      }\n\n      if (false) {}\n\n      Router.events.emit('routeChangeComplete', as, routeProps);\n      return true;\n    } catch (err1) {\n      if (err1.cancelled) {\n        return false;\n      }\n\n      throw err1;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils).getURL() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if ((0, _routeLoader).isAssetError(err) || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      let Component1;\n      let styleSheets;\n      let props;\n\n      if (typeof Component1 === 'undefined' || typeof styleSheets === 'undefined') {\n        ({\n          page: Component1,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n\n      const routeInfo = {\n        props,\n        Component: Component1,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component1, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, routeProps, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, resolvedAs, routeProps) {\n    try {\n      const existingRouteInfo = this.components[route];\n\n      if (routeProps.shallow && existingRouteInfo && this.route === route) {\n        return existingRouteInfo;\n      }\n\n      const cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component: Component1,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = __webpack_require__(/*! react-is */ \"react-is\");\n\n        if (!isValidElementType(Component1)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref;\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils).formatWithValidation({\n          pathname,\n          query\n        }), resolvedAs, __N_SSG, this.locale);\n      }\n\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component1, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as,\n        locale: this.locale,\n        locales: this.locales,\n        defaultLocale: this.defaultLocale\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err2) {\n      return this.handleRouteInfoError(err2, pathname, query, as, routeProps);\n    }\n  }\n\n  set(route, pathname, query, as, data, resetScroll) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value or `#top`\n    // To mirror browsers\n\n    if (hash === '' || hash === 'top') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl).parseRelativeUrl(url);\n    let {\n      pathname: pathname2\n    } = parsed;\n\n    if (false) {}\n\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n\n    if (false) {} else {\n      parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n      if (parsed.pathname !== pathname2) {\n        pathname2 = parsed.pathname;\n        parsed.pathname = pathname2;\n        url = (0, _utils).formatWithValidation(parsed);\n      }\n    }\n\n    const route = (0, _normalizeTrailingSlash).removePathTrailingSlash(pathname2); // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n    if (true) {\n      return;\n    }\n\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? this._getStaticData(this.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : this.locale)) : false;\n    }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const componentResult = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return componentResult;\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err2 = new Error('Loading initial props cancelled');\n        err2.cancelled = true;\n        throw err2;\n      }\n\n      return data;\n    });\n  }\n\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n\n    if (false) {}\n\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n\n  _getServerData(dataHref) {\n    const {\n      href: resourceKey\n    } = new URL(dataHref, window.location.href);\n\n    if (this.sdr[resourceKey]) {\n      return this.sdr[resourceKey];\n    }\n\n    return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(data => {\n      delete this.sdr[resourceKey];\n      return data;\n    }).catch(err2 => {\n      delete this.sdr[resourceKey];\n      throw err2;\n    });\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App1\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App1);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils).loadGetInitialProps(App1, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as, routeProps) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data, resetScroll) {\n    return this.sub(data, this.components['/_app'].Component, resetScroll);\n  }\n\n}\n\nRouter.events = (0, _mitt).default();\nexports.default = Router;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/next/dist/shared/lib/router/router.js\n");

/***/ }),

/***/ "../shared/lib/datocms-client.js":
/*!***************************************!*\
  !*** ../shared/lib/datocms-client.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// @ts-check\nconst {\n  GraphQLClient\n} = __webpack_require__(/*! graphql-request */ \"graphql-request\");\n\nconst DATOCMS_ENDPOINT =  false ? 0 : \"https://graphql.datocms.com/preview\";\nconst DATOCMS_HEADERS = {\n  Authorization: `Bearer ${\"6b99263faa95cff048b0b1b1fdfff7\"}`\n};\nconst client = new GraphQLClient(DATOCMS_ENDPOINT, {\n  headers: DATOCMS_HEADERS\n});\nmodule.exports = client;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2hhcmVkL2xpYi9kYXRvY21zLWNsaWVudC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFvQkMsbUJBQU8sQ0FBQyx3Q0FBRCxDQUFqQzs7QUFFQSxNQUFNQyxnQkFBZ0IsR0FDcEIsU0FBdUMsQ0FBdkMsR0FBd0UscUNBRDFFO0FBR0EsTUFBTUMsZUFBZSxHQUFHO0FBQ3RCQyxFQUFBQSxhQUFhLEVBQUcsVUFBU0MsZ0NBQStDO0FBRGxELENBQXhCO0FBSUEsTUFBTUcsTUFBTSxHQUFHLElBQUlSLGFBQUosQ0FBa0JFLGdCQUFsQixFQUFvQztBQUNqRE8sRUFBQUEsT0FBTyxFQUFFTjtBQUR3QyxDQUFwQyxDQUFmO0FBSUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsTUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ3Jpa29tc24vdjcvLi4vc2hhcmVkL2xpYi9kYXRvY21zLWNsaWVudC5qcz9mMDZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuXG5jb25zdCB7IEdyYXBoUUxDbGllbnQgfSA9IHJlcXVpcmUoXCJncmFwaHFsLXJlcXVlc3RcIik7XG5cbmNvbnN0IERBVE9DTVNfRU5EUE9JTlQgPVxuICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PSBcInByb2R1Y3Rpb25cIiA/IFwiaHR0cHM6Ly9ncmFwaHFsLmRhdG9jbXMuY29tL1wiIDogXCJodHRwczovL2dyYXBocWwuZGF0b2Ntcy5jb20vcHJldmlld1wiO1xuXG5jb25zdCBEQVRPQ01TX0hFQURFUlMgPSB7XG4gIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19EQVRPQ01TX1BVQkxJQ19BUElfS0VZfWAsXG59O1xuXG5jb25zdCBjbGllbnQgPSBuZXcgR3JhcGhRTENsaWVudChEQVRPQ01TX0VORFBPSU5ULCB7XG4gIGhlYWRlcnM6IERBVE9DTVNfSEVBREVSUyxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsaWVudDtcbiJdLCJuYW1lcyI6WyJHcmFwaFFMQ2xpZW50IiwicmVxdWlyZSIsIkRBVE9DTVNfRU5EUE9JTlQiLCJEQVRPQ01TX0hFQURFUlMiLCJBdXRob3JpemF0aW9uIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0RBVE9DTVNfUFVCTElDX0FQSV9LRVkiLCJjbGllbnQiLCJoZWFkZXJzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../shared/lib/datocms-client.js\n");

/***/ }),

/***/ "../../node_modules/next/link.js":
/*!***************************************!*\
  !*** ../../node_modules/next/link.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"../../node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2R0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZ3Jpa29tc24vdjcvLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcz84ZWYxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/next/link.js\n");

/***/ }),

/***/ "@chakra-ui/react":
/*!***********************************!*\
  !*** external "@chakra-ui/react" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@chakra-ui/react");

/***/ }),

/***/ "graphql-request":
/*!**********************************!*\
  !*** external "graphql-request" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql-request");

/***/ }),

/***/ "graphql-tag":
/*!******************************!*\
  !*** external "graphql-tag" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("graphql-tag");

/***/ }),

/***/ "next-seo":
/*!***************************!*\
  !*** external "next-seo" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("next-seo");

/***/ }),

/***/ "../../../server/denormalize-page-path":
/*!************************************************************!*\
  !*** external "next/dist/server/denormalize-page-path.js" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/denormalize-page-path.js");

/***/ }),

/***/ "../i18n/normalize-locale-path":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/i18n/normalize-locale-path.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/i18n/normalize-locale-path.js");

/***/ }),

/***/ "../mitt":
/*!***********************************************!*\
  !*** external "next/dist/shared/lib/mitt.js" ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/mitt.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/get-asset-path-from-route":
/*!*********************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/get-asset-path-from-route.js" ***!
  \*********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/get-asset-path-from-route.js");

/***/ }),

/***/ "./utils/is-dynamic":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-dynamic.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-dynamic.js");

/***/ }),

/***/ "./utils/parse-relative-url":
/*!**************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-relative-url.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-relative-url.js");

/***/ }),

/***/ "./utils/querystring":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/querystring.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/querystring.js");

/***/ }),

/***/ "./utils/route-matcher":
/*!*********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-matcher.js" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-matcher.js");

/***/ }),

/***/ "./utils/route-regex":
/*!*******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/route-regex.js" ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/route-regex.js");

/***/ }),

/***/ "../shared/lib/utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "react-datocms":
/*!********************************!*\
  !*** external "react-datocms" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-datocms");

/***/ }),

/***/ "react-is":
/*!***************************!*\
  !*** external "react-is" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("react-is");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "?ba11":
/*!******************************************!*\
  !*** ./utils/resolve-rewrites (ignored) ***!
  \******************************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./generated/meta.json":
/*!*****************************!*\
  !*** ./generated/meta.json ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"about":{"email":"aldyvadhe@gmail.com","socialsJson":{"GitHub":"https://github.com/vadhe","LinkedIn":"https://bit.ly/linkedin-vdh","Twitter":"https://twitter.com/vadhe_"}},"site":{"favicon":[{"attributes":{"sizes":"16x16","type":"image/png","rel":"icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=16&w=16"},"content":null,"tag":"link"},{"attributes":{"sizes":"32x32","type":"image/png","rel":"icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=32&w=32"},"content":null,"tag":"link"},{"attributes":{"sizes":"96x96","type":"image/png","rel":"icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=96&w=96"},"content":null,"tag":"link"},{"attributes":{"sizes":"192x192","type":"image/png","rel":"icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=192&w=192"},"content":null,"tag":"link"},{"attributes":{"sizes":"57x57","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=57&w=57"},"content":null,"tag":"link"},{"attributes":{"sizes":"60x60","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=60&w=60"},"content":null,"tag":"link"},{"attributes":{"sizes":"72x72","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=72&w=72"},"content":null,"tag":"link"},{"attributes":{"sizes":"76x76","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=76&w=76"},"content":null,"tag":"link"},{"attributes":{"sizes":"114x114","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=114&w=114"},"content":null,"tag":"link"},{"attributes":{"sizes":"120x120","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=120&w=120"},"content":null,"tag":"link"},{"attributes":{"sizes":"144x144","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=144&w=144"},"content":null,"tag":"link"},{"attributes":{"sizes":"152x152","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=152&w=152"},"content":null,"tag":"link"},{"attributes":{"sizes":"180x180","rel":"apple-touch-icon","href":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=180&w=180"},"content":null,"tag":"link"},{"attributes":{"name":"msapplication-square70x70logo","content":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=70&w=70"},"content":null,"tag":"meta"},{"attributes":{"name":"msapplication-square150x150logo","content":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=150&w=150"},"content":null,"tag":"meta"},{"attributes":{"name":"msapplication-square310x310logo","content":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=310&w=310"},"content":null,"tag":"meta"},{"attributes":{"name":"msapplication-square310x150logo","content":"https://www.datocms-assets.com/55094/1631083048-iconsetsprite-1.png?h=150&w=310"},"content":null,"tag":"meta"}],"seo":{"fallback":{"description":"people call me vadhe! I,m FrontEnd Developer I have worked professionally as a frontend developer since 2019.","image":{"url":"https://www.datocms-assets.com/55094/1619221965-social.png","width":2048,"height":1024},"title":"Hello, world!","twitterCard":"summary_large_image"},"siteName":"griko.id","titleSuffix":"Vadhe","twitterAccount":"@vadhe_"}}}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();